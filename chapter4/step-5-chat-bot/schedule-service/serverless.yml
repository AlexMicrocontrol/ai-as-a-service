service: chapter3-schedule
frameworkVersion: ">=1.30.0"
plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-dotenv-plugin
custom:
  dataBucket: ${env:CHAPTER3_DATA_BUCKET}
  region: ${env:AWS_DEFAULT_REGION, 'eu-west-1'}
  accountid: ${env:AWS_ACCOUNT_ID}
  poolArn: ${env:CHAPTER3_POOL_ARN}
  domain: ${env:CHAPTER3_DOMAIN}
  dotenv:
    path: ../.env
  customDomain:
    domainName: 'chapter3api.${self:custom.domain}'
    stage: ${self:provider.stage}
    basePath: schedule
    certificateName: '*.${self:custom.domain}'
    createRoute53Record: true
    endpointType: regional
  serverless-offline:
    port: 3002
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${env:AWS_DEFAULT_REGION, 'eu-west-1'}
  environment:
    TODO_TABLE: 'chapter3-todo-${self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.dataBucket}/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:${self:custom.accountid}:*"
    - Effect: Allow
      Action:
        - polly:*
      Resource: "*"

functions:
  day:
    handler: handler.day
    events:
      - http:
          method: POST
          path: day
          cors: true
          authorizer:
            arn: '${self:custom.poolArn}'
  poll:
    handler: handler.poll
    events:
      - http:
          method: GET
          path: day/{id}
          cors: true
          authorizer:
            arn: '${self:custom.poolArn}'

